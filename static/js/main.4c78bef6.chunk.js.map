{"version":3,"sources":["components/game-list.component.jsx","components/input-textfield.component.jsx","functions/xmlToJson.js","components/button.component.jsx","components/picked-game.component.jsx","App.js","index.js"],"names":["GameList","games","errors","error","message","items","item","className","title","map","name","collid","InputTextfield","handleInput","handleSubmit","useState","inputfield","setInputfield","useEffect","onSubmit","event","preventDefault","htmlFor","id","value","onChange","target","type","xmlToJson","xml","i","j","attribute","nodeName","old","obj","nodeType","attributes","length","nodeValue","hasChildNodes","childNodes","undefined","push","Button","handleClick","text","disabled","hidden","onClick","PickedGame","randomGame","App","setGames","status","setStatus","username","setUsername","setRandomGame","user","fetch","then","response","ok","Error","xmlString","xmlDoc","DOMParser","parseFromString","jsonObj","catch","console","randomNumber","Math","floor","random","Object","keys","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4c78bef6.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./game-list.styles.css\";\r\n\r\nconst GameList = ({ games }) => {\r\n  //usually invalid username\r\n  if (games.errors) {\r\n    return <div>{games.errors.error.message[\"#text\"]}</div>;\r\n  }\r\n  //collection items, null or undefined. Either collection is empty or fetch is qued at BGG api\r\n  else if (games.items == null) {\r\n    return null;\r\n  }\r\n  //no games in collection\r\n  else if (games.items.item == null) {\r\n    return <div>This user has no games in his collection</div>;\r\n  }\r\n  //we found a user who actually has games\r\n  else\r\n    return (\r\n      <section className=\"listContainer\">\r\n        <h2 className=\"listHeader\">List of Games</h2>\r\n        <ul className=\"gameList\" title=\"List of Games\">\r\n          {games.items.item.map((item) => {\r\n            return (\r\n              <li key={item[\"@attributes\"].collid} className=\"gameListItem\">\r\n                {/* key is collid for now, change to objectid after cleaning up duplicates */}\r\n                {item.name[\"#text\"]}\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </section>\r\n    );\r\n};\r\n\r\nexport default GameList;\r\n","import React, { useEffect, useState } from \"react\";\r\nimport \"./input-textfield.styles.css\";\r\n\r\nconst InputTextfield = ({ handleInput, handleSubmit }) => {\r\n  const [inputfield, setInputfield] = useState(\"\");\r\n\r\n  const handleFieldChange = (event) => {\r\n    setInputfield(event.target.value);\r\n  };\r\n  const submit = (event) => {\r\n    event.preventDefault();\r\n    handleSubmit(inputfield);\r\n  };\r\n  useEffect(() => {\r\n    handleInput(inputfield);\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [inputfield]);\r\n\r\n  return (\r\n    <form onSubmit={submit}>\r\n      <label htmlFor=\"usernameinput\">BGG Username: </label>\r\n      <br />\r\n      <input\r\n        id=\"usernameinput\"\r\n        className=\"usernameInput\"\r\n        value={inputfield}\r\n        onChange={handleFieldChange}\r\n      />\r\n      <br />\r\n      <button className=\"fetchButton\" type=\"submit\">\r\n        Fetch Collection\r\n      </button>\r\n    </form>\r\n  );\r\n};\r\nexport default InputTextfield;\r\n","// Changes XML to JSON\r\n/* Copyright (c) 2021 by KurtWM (https://codepen.io/KurtWM/pen/JnLak)\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\r\n */\r\n\r\nfunction xmlToJson(xml) {\r\n  // Create the return object\r\n  var obj = {},\r\n    i,\r\n    j,\r\n    attribute,\r\n    item,\r\n    nodeName,\r\n    old;\r\n\r\n  if (xml.nodeType === 1) {\r\n    // element\r\n    // do attributes\r\n    if (xml.attributes.length > 0) {\r\n      obj[\"@attributes\"] = {};\r\n      for (j = 0; j < xml.attributes.length; j = j + 1) {\r\n        attribute = xml.attributes.item(j);\r\n        obj[\"@attributes\"][attribute.nodeName] = attribute.nodeValue;\r\n      }\r\n    }\r\n  } else if (xml.nodeType === 3) {\r\n    // text\r\n    obj = xml.nodeValue;\r\n  }\r\n\r\n  // do children\r\n  if (xml.hasChildNodes()) {\r\n    for (i = 0; i < xml.childNodes.length; i = i + 1) {\r\n      item = xml.childNodes.item(i);\r\n      nodeName = item.nodeName;\r\n      if (obj[nodeName] === undefined) {\r\n        obj[nodeName] = xmlToJson(item);\r\n      } else {\r\n        if (obj[nodeName].push === undefined) {\r\n          old = obj[nodeName];\r\n          obj[nodeName] = [];\r\n          obj[nodeName].push(old);\r\n        }\r\n        obj[nodeName].push(xmlToJson(item));\r\n      }\r\n    }\r\n  }\r\n  return obj;\r\n}\r\n\r\nexport default xmlToJson;\r\n","import React from \"react\";\r\nimport \"./button.styles.css\";\r\n\r\nconst Button = ({\r\n  type,\r\n  handleClick,\r\n  text,\r\n  disabled = false,\r\n  hidden = false,\r\n}) => {\r\n  if (hidden) {\r\n    return <></>;\r\n  } else\r\n    return (\r\n      <button disabled={disabled} className={type} onClick={handleClick}>\r\n        {text}\r\n      </button>\r\n    );\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport \"./picked-game.styles.css\";\r\n\r\nconst PickedGame = ({ games, randomGame }) => {\r\n  if (randomGame === -1) {\r\n    return <></>;\r\n  } else {\r\n    return (\r\n      <div className=\"pickedGame\">\r\n        How about a game of <br />\r\n        {games.items.item[randomGame].name[\"#text\"]}\r\n      </div>\r\n    );\r\n  }\r\n};\r\nexport default PickedGame;\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport GameList from \"./components/game-list.component\";\nimport InputTextfield from \"./components/input-textfield.component\";\nimport xmlToJson from \"./functions/xmlToJson\";\nimport Button from \"./components/button.component\";\nimport PickedGame from \"./components/picked-game.component\";\n\nfunction App() {\n  const [games, setGames] = useState({});\n  const [status, setStatus] = useState(\"No collections loaded.\");\n  const [username, setUsername] = useState(\"\");\n  const [randomGame, setRandomGame] = useState(-1);\n\n  const updateUsername = (user) => {\n    setUsername(user);\n  };\n  const clearCollection = () => {\n    setGames({});\n    setRandomGame(-1);\n  };\n  const pickRandomGame = () => {\n    let randomNumber = Math.floor(\n      Math.random() * Object.keys(games.items.item).length\n    );\n    setRandomGame(randomNumber);\n    console.log(\n      \"random: \",\n      Math.floor(Math.random() * Object.keys(games.items.item).length)\n    );\n  };\n\n  const fetchData = () => {\n    setRandomGame(-1);\n    fetch(\n      `https://frozen-dawn-34650.herokuapp.com/https://www.boardgamegeek.com/xmlapi2/collection?username=${username}&own=1`\n    )\n      .then((response) => {\n        if (!response.ok) {\n          setStatus(\n            \"Board Game Geek api or the Internet had a break. You can always try again.\"\n          );\n          throw new Error(\n            \"Board Game Geek api or the Internet had a break. You can always try again.\"\n          );\n        }\n        if (response.status === 202) {\n          setStatus(\n            \"Board Game Geek API is processing your request. Try again in a second.\"\n          );\n\n          throw new Error(\n            \"Board Game Geek API is processing your request. Try again in a second.\"\n          );\n        }\n        if (response.status === 200) {\n          setStatus(`Collection fethced.`);\n          return response.text();\n        } else {\n          setStatus(`Something weird happened. Statuscode: ${response.status}`);\n          throw new Error(\n            `Something weird happened. Statuscode: ${response.status}`\n          );\n        }\n      })\n      .then((xmlString) => {\n        let parser = new DOMParser();\n        let xmlDoc = parser.parseFromString(xmlString, \"text/xml\");\n        let jsonObj = xmlToJson(xmlDoc);\n        setGames(jsonObj);\n      })\n      .catch((error) => {\n        console.error(error);\n      });\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Board Game Randomizer 2</h1>\n      </header>\n      <div>{status}</div>\n      <InputTextfield\n        handleInput={updateUsername}\n        handleSubmit={fetchData}\n      ></InputTextfield>\n      <Button\n        type=\"pickRandom\"\n        handleClick={pickRandomGame}\n        text=\"Pick a Random Game\"\n        disabled={!games.items}\n      ></Button>\n      <PickedGame games={games} randomGame={randomGame}></PickedGame>\n      <br />\n      <Button\n        type=\"clear\"\n        handleClick={clearCollection}\n        text=\"Clear Collection\"\n        disabled={!games.items}\n      ></Button>\n      <GameList games={games}></GameList>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}